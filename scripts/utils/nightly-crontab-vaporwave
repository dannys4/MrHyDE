#!/bin/bash

# Check input to decide which mode to run the script in
if [ $# -eq 0 ]; then
  echo "No arguments provided to the script. Defaulting to pulling and building on top of the previous night's results."
  SCRIPT_MODE=0
else
  if [[ $1 == "clean" ]]; then
    echo "Argument \"clean\" provided to the script. Cleaning all source and build directories and rebuilding from scratch."
    SCRIPT_MODE=1
  else
    echo "Unrecognized argument $1 provided to the script. Ignoring and running the default of pulling and building on top of the previous night's results."
  fi
fi

# Set up shortcuts for directories - the first three are really the only ones necessary to modify
HOME_DIR="/ascldap/users/gbharpe"
SCRIPTS_FOLDER="/ascldap/users/gbharpe/Programming/cpp/scripts/vaporwave"
NIGHTLY_FOLDER="/ascldap/users/MrHyDE/nightly"
TRILINOS_SOURCE_PREFIX="${NIGHTLY_FOLDER}/Trilinos"
MrHyDE_SOURCE_PREFIX="${NIGHTLY_FOLDER}/MrHyDE"
TRILINOS_SOURCE="${TRILINOS_SOURCE_PREFIX}/Trilinos-source"
TRILINOS_BUILD="${TRILINOS_SOURCE_PREFIX}/Trilinos-build"
MrHyDE_SOURCE="${MrHyDE_SOURCE_PREFIX}/MrHyDE-source"
MrHyDE_BUILD="${MrHyDE_SOURCE_PREFIX}/MrHyDE-build"

# Call bash_profile (which calls bashrc) to set up the environment properly since cron runs in an empty environment
source ${HOME_DIR}/.bash_profile 

# load the correct modules
# gcc 6.1 may be causing issues, so we'll try gcc 9.2
# gcc 9.2 causes issues with TPLs. back to gcc 6.1 for now...
echo "Nightly MrHyDE tester running..."
echo "Loading modules..."
module load sems-devpack-gcc/6.1.0
module load sems-ninja_fortran/1.8.2
module load sems-cmake/3.17.1
module load sems-numpy/1.9.1/base
#module unload sems-gcc/6.1.0 
#module load sems-gcc/9.2.0 

cd ${NIGHTLY_FOLDER}

# destroy last night's results if in clean mode
if [ ${SCRIPT_MODE} -eq 1 ]; then
  rm -rf ${TRILINOS_SOURCE_PREFIX}
  rm -rf ${MrHyDE_SOURCE_PREFIX}
  mkdir Trilinos
  mkdir MrHyDE
fi

# create some status variables
STATUS_LOG=""
STATUS_TRILINOS_CLONE=0
STATUS_TRILINOS_BUILD=0
STATUS_MrHyDE_CLONE=0
STATUS_MrHyDE_BUILD=0

# start with Trilinos
echo "Starting Trilinos..."
cd ${TRILINOS_SOURCE_PREFIX}
if [ ${SCRIPT_MODE} -eq 1 ]; then
  git clone https://github.com/Trilinos/trilinos.git Trilinos-source
fi

# check the exit status of the most recently executed command
# if in clean mode, this checks for a successful clone
# if not in clean mode, this checks if the directory change was successful, which it should always be
if [ $? -eq 0 ]; then 
  cd ${TRILINOS_SOURCE}

  # if in clean mode, switch to develop immediately. otherwise fetch and pull origin
  if [ ${SCRIPT_MODE} -eq 1 ]; then
    git checkout develop
  else
    git checkout develop
    git fetch origin
    git pull origin develop
  fi

  # magic to grab the latest commit SHA
  TRILINOS_COMMIT=$(git show | grep commit | tr " " "\n" | tail -1)

  
  cd ${TRILINOS_SOURCE_PREFIX}
  cp ${SCRIPTS_FOLDER}/configure-nightly-trilinos-MrHyDE ${TRILINOS_SOURCE_PREFIX}

  # if in clean mode, this folder needs to be created
  if [ ${SCRIPT_MODE} -eq 1 ]; then
    mkdir Trilinos-build
  fi

  # build and install Trilinos
  cd ${TRILINOS_BUILD}
  source ${TRILINOS_SOURCE_PREFIX}/configure-nightly-trilinos-MrHyDE
  ninja -j20 install

  # check the exit status of the build command
  if [ $? -eq 0 ]; then 
    echo "Trilinos build success!"
  else
    STATUS_TRILINOS_BUILD=$?
    echo "Trilinos build failed with status ${STATUS_TRILINOS_BUILD}!"
    STATUS_LOG="${STATUS_LOG}Trilinos build failed with status ${STATUS_TRILINOS_BUILD} using commit SHA ${TRILINOS_COMMIT} on Vaporwave, $(date)\n"
  fi

else
  STATUS_TRILINOS_CLONE=$?
  echo "Trilinos git clone failed with status ${STATUS_TRILINOS_CLONE}!"
  STATUS_LOG="${STATUS_LOG}Trilinos git clone failed with status ${STATUS_TRILINOS_CLONE} on Vaporwave, $(date)\n"
fi

# now build MrHyDE
echo "Starting MrHyDE..."
cd ${MrHyDE_SOURCE_PREFIX}
if [ ${SCRIPT_MODE} -eq 1 ]; then
  git clone https://github.com/TimWildey/MrHyDE.git MrHyDE-source
fi

# check the exit status of the most recently executed command
# if in clean mode, this checks for a successful clone
# if not in clean mode, this checks if the directory change was successful, which it should always be
if [ $? -eq 0 ]; then

  cd ${MrHyDE_SOURCE}

  # if not in clean mode, fetch and pull origin
  if [ ${SCRIPT_MODE} -eq 0 ]; then
    git checkout master
    git fetch origin
    git pull origin master
  fi

  MrHyDE_COMMIT=$(git show | grep commit | tr " " "\n" | tail -1)

  cd ${MrHyDE_SOURCE_PREFIX}
  cp ${SCRIPTS_FOLDER}/configure-nightly-MrHyDE ${MrHyDE_SOURCE_PREFIX}

  # if in clean mode, this folder needs to be created
  if [ ${SCRIPT_MODE} -eq 1 ]; then
    mkdir MrHyDE-build
  fi

  # build MrHyDE
  cd MrHyDE-build
  source ${MrHyDE_SOURCE_PREFIX}/configure-nightly-MrHyDE
  ninja -j20

  # check the exit status of the build command
  if [ $? -eq 0 ]; then
    echo "MrHyDE build success!"
  else
    STATUS_MrHyDE_BUILD=$?
    echo "MrHyDE build failed!"
    STATUS_LOG="${STATUS_LOG}MrHyDE build failed with status ${STATUS_MrHyDE_BUILD} using commit MrHyDE SHA ${MrHyDE_COMMIT} and Trilinos SHA ${TRILINOS_COMMIT} on Vaporwave, $(date)\n"
  fi

else
  STATUS_MrHyDE_CLONE=$?
  echo "MrHyDE git clone failed!"
  STATUS_LOG="${STATUS_LOG}MrHyDE git clone failed with status ${STATUS_MrHyDE_CLONE} on Vaporwave, $(date)\n"
fi

# now run the testsuite and count the failures
echo "Running the testsuite..."
cd ${MrHyDE_SOURCE}/regression
ln -sf ${MrHyDE_BUILD}/src/mrhyde ${MrHyDE_SOURCE}/regression/mrhyde
./runtests.py -s > ${MrHyDE_SOURCE_PREFIX}/MrHyDE-nightly-vaporwave.txt


cd ${MrHyDE_SOURCE_PREFIX}
NUM_FAILS=$(cat MrHyDE-nightly-vaporwave.txt | grep Fail | tr -s " " "\n" | sed '5q;d') # This should probably be explained... find the Fail line in the testsuite log, squeeze all whitespaces then replace them with new lines, and grab line 5. This is the number of failures.

# check if the number of failures is empty. if so, let me know
if [ -z "$NUM_FAILS" ]; then
  STATUS_LOG="${STATUS_LOG}Number of testsuite failures is empty for MrHyDE on Vaporwave, $(date)\n"
fi

# similar nonsense to grab month and day and year
# currently unused
MONTH=$(date | tr " " "\n" | sed '2q;d')
DAY=$(date | tr " " "\n" | sed '3q;d')
YEAR=$(date | tr " " "\n" | sed '6q;d')


# finally, send the report
echo "Sending the report..."

# if there's nothing unusual, send a normal email. otherwise, report 'no tests run'
if [ -z "$STATUS_LOG" ]; then
  cat MrHyDE-nightly-vaporwave.txt | mail -s "MrHyDE on Vaporwave: ${NUM_FAILS} failures" gbharpe@sandia.gov
  cat MrHyDE-nightly-vaporwave.txt | mail -s "MrHyDE on Vaporwave: ${NUM_FAILS} failures" tmwilde@sandia.gov
else
  echo -e ${STATUS_LOG} | mail -s "MrHyDE on Vaporwave: no tests run" gbharpe@sandia.gov
  echo -e ${STATUS_LOG} | mail -s "MrHyDE on Vaporwave: no tests run" tmwilde@sandia.gov
fi
